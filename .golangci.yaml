---
# -------------------------------------------------------------
# NOTE: This Lint setting is an example. Customize it for your project.
# https://golangci-lint.run/usage/configuration/
# -------------------------------------------------------------
run:
  # The default concurrency value is the number of available CPU.
  concurrency: 8
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 10m
  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 1
  # Include test files or not.
  # Default: true
  tests: true
  # List of build tags, all linters use it.
  # Default: [].
  # build-tags:
  #   - mytag

  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # skip-dirs:
  #   - src/external_libs
  #   - autogenerated_by_my_lib

  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  # skip-dirs-use-default: false

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  allow-serial-runners: false

linters-settings:
  # https://github.com/golangci/golangci-lint
  # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2
  # depguard:
  #   list-type: blacklist
  #   packages:
  #     # logging is allowed only by logutils.Log, logrus
  #     # is allowed to use only in logutils package
  #     - github.com/sirupsen/logrus
  #   packages-with-error-message:
  #     - github.com/sirupsen/logrus: "logging is allowed only by logutils.Log"
  # https://github.com/mibk/dupl
  # Tool for code clone detection
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

    # List of functions to exclude from checking, where each entry is a single function to exclude.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    # Will handle this setting after activating the errcheck package.
    exclude-functions: 
      - fmt
      - io/ioutil
      - io
      - database/sql
      - database/mysql
      - github.com/pkg/sftp
      - archive/zip
      - github.com/golang-migrate/migrate/v4/database/mysql

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    #     exclude: /path/to/file.txt
  # https://github.com/ultraware/funlen
  # Tool for detection of long functions
  funlen:
    lines: 100
    statements: 50
  # https://github.com/uudashr/gocognit
  # Computes and checks the cognitive complexity of functions
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10
  # https://github.com/jgautheron/goconst
  # Finds repeated strings that could be replaced by a constant
  goconst:
    min-len: 2
    min-occurrences: 3
    # Ignore test files.
    # Default: false
    ignore-tests: true
  # https://github.com/go-critic/go-critic
  # The most opinionated Go source code linter
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
      - paramTypeCombine
    settings:
      hugeParam:
        # Size in bytes that makes the warning trigger.
        # Default: 80
        sizeThreshold: 10000
      rangeValCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 128
        sizeThreshold: 1000
        # Whether to check test functions.
        # Default: true
        skipTestFuncs: true
  # https://github.com/alecthomas/gocyclo
  # Computes and checks the cyclomatic complexity of functions
  gocyclo:
    min-complexity: 500
  # https://github.com/tetafro/godot
  # Check if comments end in a period
  godot:
    # check all top-level comments, not only declarations
    check-all: false
  # https://github.com/matoous/godox
  # Tool for detection of FIXME, TODO and other comment keywords
  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - NOTE
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging
  # https://golang.org/cmd/gofmt/
  # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: false
  gofumpt:
    # Module path which contains the source code being formatted.
    # Default: ""
    module-path: nfc-server
  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - prefix(nfc-server)
      - default # Default section: contains all imports that could not be matched to another section type.
    custom-order: true
  # https://godoc.org/golang.org/x/tools/cmd/goimports
  # Goimports does everything that gofmt does. Additionally it checks unused imports
  goimports:
    local-prefixes: nfc-server
  mnd:
    # don't include the "operation" and "assign"
    checks: 
      - argument
      - case
      - condition
      - return
  # https://golang.org/cmd/vet/
  # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
  govet:
    enable-all: true
    disable:
      # Find structs that would use less memory if their fields were sorted.
      - fieldalignment
      # Checks for unused writes.
      - unusedwrite
      # Check for possible unintended shadowing of variables.
      - shadow
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
      # shadow:
      #   # Whether to be strict about shadowing; can be noisy.
      #   # Default: false
      #   strict: false
  # https://github.com/walle/lll
  # Reports long lines
  lll:
    line-length: 300
  # https://github.com/client9/misspell
  # Finds commonly misspelled English words in comments
  misspell:
    locale: US
    ignore-words:
      - CANCELLED
      - continute
      - distribusion
      - gurantee
      - analyses
  # https://github.com/alexkohler/nakedret
  # Finds naked returns in functions greater than a specified function length
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  # https://github.com/nakabonne/nestif
  # Reports deeply nested if statements
  nestif:
    # minimal complexity of if statements to report, 5 by default
    min-complexity: 4
  # https://github.com/golangci-lint/pkg/golinters/nolintlint
  # Reports ill-formed or insufficient nolint directives
  nolintlint:
    allow-unused: false # report any unused nolint directives
    allow-no-explanation: [] # Exclude following linters from requiring an explanation.
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: false # don't require nolint directives to be specific about which linter is being skipped
  # https://github.com/alexkohler/prealloc
  # Finds slice declarations that could potentially be preallocated
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  revive:
    rules:
      - name: exported
        severity: warning
        disabled: true
  # https://github.com/jingyugao/rowserrcheck
  # checks whether Err of rows is checked successfully
  rowserrcheck:
    packages:
      - github.com/xxxxx/
  # https://github.com/maratori/testpackage
  # linter that makes you use a separate _test package
  testpackage:
    # regexp pattern to skip files
    skip-regexp: (export|internal)_test\.go
  # https://github.com/mvdan/unparam
  # Reports unused function parameters
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for sub directory of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  # https://github.com/dominikh/go-tools/tree/master/unused
  # Checks Go code for unused constants, variables, functions and types
  unused:
    # Mark all exported fields as used.
    # default: true
    exported-fields-are-used: false
  # https://github.com/ultraware/whitespace
  # Tool for detection of leading and trailing whitespace
  whitespace:
    multi-if: false # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature
  # https://github.com/bombsimon/wsl
  # Whitespace Linter - Forces you to use empty lines!
  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types on line above. Default is true.
    strict-append: true
    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    allow-assign-and-call: true
    # Allow multiline assignments to be cuddled. Default is true.
    allow-multiline-assign: true
    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: false
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: false
    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0
    # Force cuddling of err checks with err var assignment
    force-err-cuddling: false
    # Allow leading comments to be separated with empty liens
    allow-separated-leading-comment: false
  tagliatelle:
    # Checks the struct tag name case.
    case:
    # Defines the association between tag name and case.
    # Any struct tag name can be used.
    # Supported string cases:
    # - `camel`
    # - `pascal`
    # - `kebab`
    # - `snake`
    # - `upperSnake`
    # - `goCamel`
    # - `goPascal`
    # - `goKebab`
    # - `goSnake`
    # - `upper`
    # - `lower`
    # - `header`
      rules:
        json: snake
        mapstructure: snake
        yaml: snake
      use-field-name: false
  usestdlibvars:
    # Suggest the use of http.MethodXX.
    # Default: true
    http-method: true
    # Suggest the use of http.StatusXX.
    # Default: true
    http-status-code: true
    # Suggest the use of time.Weekday.String().
    # Default: true
    time-weekday: true
    # Suggest the use of time.Month.String().
    # Default: false
    time-month: true
    # Suggest the use of time.Layout.
    # Default: false
    time-layout: true
    # Suggest the use of crypto.Hash.String().
    # Default: false
    crypto-hash: true
    # Suggest the use of rpc.DefaultXXPath.
    # Default: false
    default-rpc-path: true
    # Suggest the use of sql.LevelXX.String().
    # Default: false
    sql-isolation-level: true
    # Suggest the use of tls.SignatureScheme.String().
    # Default: false
    tls-signature-scheme: true
    # Suggest the use of constant.Kind.String().
    # Default: false
    constant-kind: true
  unconvert:
    # Remove conversions that force intermediate rounding.
    # Default: false
    fast-math: true
    # Be more conservative (experimental).
    # Default: false
    safe: true
  staticcheck:
    # SAxxxx checks in https://staticcheck.dev/docs/configuration/options/#checks
    # Example (to disable some checks): [ "all", "-SA1000", "-SA1001"]
    # Default: ["*"]
    checks: [ "all", "-SA9003"]
linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # please refer linter page for document and update https://golangci-lint.run/usage/linters/
  disable-all: true
  enable:
    #- asasalint
    #- asciicheck
    - bidichk
    - bodyclose
    #- containedctx
    #- contextcheck
    #- copyloopvar need go 1.22
    #- cyclop
    - decorder
    #- depguard
    #- dogsled
    #- dupl
    #- dupword
    - durationcheck
    #- errcheck
    - errchkjson
    #- errname
    #- errorlint
    #- exhaustive
    #- exhaustruct
    #- exportloopref
    #- forbidigo
    #- forcetypeassert
    #- funlen
    - gci
    - ginkgolinter
    - gocheckcompilerdirectives
    #- gochecknoglobals
    - gochecknoinits
    - gochecksumtype
    #- gocognit
    - goconst
    #- gocritic
    - gocyclo
    #- godot
    #- godox
    #- goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    #- gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    #- gosec
    - gosimple
    #- gosmopolitan
    - govet
    - grouper
    - importas
    #- inamedparam
    #- ineffassign
    #- interfacebloat
    #- intrange need ver 1.22
    #- ireturn
    #- lll
    #- loggercheck
    #- maintidx
    #- makezero
    - mirror
    - misspell
    #- musttag
    #- nakedret
    #- nestif
    #- nilerr
    #- nilnil
    #- nlreturn
    #- noctx
    - nolintlint
    #- nonamedreturns
    - nosprintfhostport
    - paralleltest
    #- perfsprint
    #- prealloc
    - predeclared
    - promlinter
    - protogetter
    - reassign
    - revive
    #- rowserrcheck
    - sloglint
    - spancheck
    #- sqlclosecheck
    - staticcheck
    #- stylecheck
    #- tagalign
    - tagliatelle
    #- tenv
    - testableexamples
    - testifylint
    - testpackage
    #- thelper
    - tparallel
    - typecheck
    - unconvert
    #- unparam
    #- unused
    - usestdlibvars
    #- varnamelen
    #- wastedassign
    #- whitespace
    #- wrapcheck
    #- wsl
    - zerologlint

issues:
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - path: _test.go
      linters:
        - paralleltest
        - testifylint
        - testpackage
        - bodyclose
        - tparallel
        - mirror
  max-same-issues: 0
  max-issues-per-linter: 0
output:
  formats:
    - format: checkstyle
      path: report.xml
    - format: colored-line-number
  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true
  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true
  # Add a prefix to the output file references.
  # Default: ""
  path-prefix: ""
  # Sort results by the order defined in `sort-order`.
  # Default: false
  sort-results: true
  # Order to use when sorting results.
  # Require `sort-results` to `true`.
  # Possible values: `file`, `linter`, and `severity`.
  #
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  # Either they are sorted alphabetically.
  #
  # Default: ["file"]
  sort-order:
    - severity
    - linter
    - file # filepath, line, and column.
  # Show statistics per linter.
  # Default: false
  show-stats: true
